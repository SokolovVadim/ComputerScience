        -:    0:Source:../src/hash_iterators.c
        -:    0:Graph:hash_iterators.gcno
        -:    0:Data:hash_iterators.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "../include/hash.h"
        -:    2:
        -:    3:// ---------------------------------------------------
        -:    4://
        -:    5://		 HASH TABLE ITERATOR FUNCTIONS
        -:    6:// 
        -:    7:// ---------------------------------------------------
        -:    8:
    #####:    9:HashTableIterator* hash_iterator_construct(HashTable* HT)
        -:   10:{
    #####:   11:	if(HT == NULL)
    #####:   12:		return NULL;
    #####:   13:	HashTableIterator* iter = (HashTableIterator* )emalloc(sizeof(*iter));
    #####:   14:	if(iter == NULL)
    #####:   15:		return NULL;
    #####:   16:	iter->hash_table_p = HT;
    #####:   17:	iter->index = 0;
        -:   18:
    #####:   19:	return iter;
        -:   20:}
        -:   21:
        -:   22:
        -:   23:/*
        -:   24:* initialise iterator
        -:   25:* without memory allocation
        -:   26:*/
        -:   27:
        -:   28:
   128000:   29:int hash_iterator_fetch(HashTableIterator* iter, HashTable* HT)
        -:   30:{
        -:   31:	// DEBUG_PRINT();
   128000:   32:	if(iter == NULL)
    #####:   33:		return -1;
        -:   34:	// DEBUG_PRINT();
   128000:   35:	if(HT == NULL)
   113800:   36:		return -1;
        -:   37:	// DEBUG_PRINT();
    14200:   38:	iter->hash_table_p = HT;
    14200:   39:	iter->index = 0;
    14200:   40:	return 0;
        -:   41:}
        -:   42:
        -:   43:// ---------------------------------------------------
        -:   44:
    #####:   45:int hash_iterator_is_end(HashTableIterator* iter)
        -:   46:{
    #####:   47:	if(iter == NULL)
    #####:   48:		return -1;
    #####:   49:	if(iter->index >= iter->hash_table_p->size_)
    #####:   50:		return 1;
        -:   51:	else
    #####:   52:		return 0;
        -:   53:}
        -:   54:
        -:   55:
        -:   56:// ---------------------------------------------------
        -:   57:
    #####:   58:Nameval* hash_iterator_begin(HashTableIterator* iter)
        -:   59:{
    #####:   60:	if(iter == NULL)
    #####:   61:		return NULL;
    #####:   62:	if(iter->hash_table_p == NULL)
    #####:   63:		return NULL;
    #####:   64:	return iter->hash_table_p->symtab[0];
        -:   65:}
        -:   66:
        -:   67:
        -:   68:// ---------------------------------------------------
        -:   69:
    #####:   70:int hash_iterator_set_next(HashTableIterator* iter)
        -:   71:{
    #####:   72:	if(iter == NULL)
    #####:   73:		return -1;
    #####:   74:	iter->index = iter->index + 1; /// does this statement need a check?
    #####:   75:	return 0;
        -:   76:}
        -:   77:
        -:   78:// ---------------------------------------------------
        -:   79:
    #####:   80:int hash_iterator_get_size(HashTableIterator* iter)
        -:   81:{
    #####:   82:	if(iter == NULL)
    #####:   83:		return 0;
    #####:   84:	return iter->hash_table_p->size_;
        -:   85:}
        -:   86:
        -:   87:
        -:   88:// ---------------------------------------------------
        -:   89:
        -:   90:/*
        -:   91:* return data in str
        -:   92:*/
        -:   93:
    #####:   94:int hash_iterator_get_data(HashTableIterator* iter, char** str)
        -:   95:{
    #####:   96:	if(iter == NULL)
    #####:   97:		return -1;
    #####:   98:	if(iter->hash_table_p == NULL)
    #####:   99:		return -1;
    #####:  100:	*str = iter->hash_table_p->symtab[iter->index]->name;
    #####:  101:	return 0;
        -:  102:}
        -:  103:
        -:  104:
        -:  105:// ---------------------------------------------------
        -:  106:
        -:  107:/*! \brief calls free for the ptr
        -:  108:*	
        -:  109:*/
        -:  110:
   256000:  111:int hash_iterator_delete(HashTableIterator* iter)
        -:  112:{
   256000:  113:	mfree(iter);
   256000:  114:	iter = NULL;
   256000:  115:	return 0;
        -:  116:}
        -:  117:
        -:  118:// ---------------------------------------------------
        -:  119:
    #####:  120:int for_each_hash_table(HashTableIterator* iter, int (*func)())
        -:  121:{
    #####:  122:	for( hash_iterator_begin(iter); hash_iterator_is_end(iter) == 0; hash_iterator_set_next(iter) )
        -:  123:	{
        -:  124:		// char* str = NULL;
        -:  125:		// hash_iterator_get_data(iter, &str);
        -:  126:		//iter->hash_table_p->symtab[iter->index] = 0;
    #####:  127:		func(iter->index);
        -:  128:	}
    #####:  129:	return 0;
        -:  130:}
        -:  131:
        -:  132:// ---------------------------------------------------
        -:  133://
        -:  134://		      NAMEVAL ITERATOR FUNCTIONS
        -:  135:// 			THE SAME AS FUNCTIONS IN LIST
        -:  136:// 
        -:  137:// ---------------------------------------------------
        -:  138:
        -:  139:
        -:  140:// index of nameval in symtab array in HT 
        -:  141:
    #####:  142:NamevalIterator* nv_iterator_construct(HashTable* HT)
        -:  143:{
    #####:  144:	if(HT == NULL)
    #####:  145:		return NULL;
    #####:  146:	NamevalIterator* iter = (NamevalIterator* )emalloc(sizeof(*iter));
    #####:  147:	if(iter == NULL)
    #####:  148:		return NULL;
        -:  149:
    #####:  150:	iter->head = NULL; // HT->symtab[index];
    #####:  151:	iter->nameval_p = NULL; // HT->symtab[index];
    #####:  152:	iter->index = START_INDEX; // !!!!
        -:  153:
    #####:  154:	return iter;
        -:  155:}
        -:  156:
        -:  157:
        -:  158:// erase(HT, "seva")
        -:  159:
        -:  160:// ---------------------------------------------------
        -:  161:
    #####:  162:int nv_iterator_init_index(HashTable* HT, NamevalIterator* iter, size_t index)
        -:  163:{
    #####:  164:	if(iter == NULL)
    #####:  165:		return -1;
    #####:  166:	if(HT == NULL)
    #####:  167:		return -1;
    #####:  168:	if(index >= HT->size_)
    #####:  169:		return -1;
    #####:  170:	iter->head = HT->symtab[index];
    #####:  171:	iter->nameval_p = HT->symtab[index];
    #####:  172:	return 0;
        -:  173:}
        -:  174:
        -:  175:
        -:  176:// ---------------------------------------------------
        -:  177:
    #####:  178:int nv_iterator_fetch(NamevalIterator* iter, char** str)
        -:  179:{
    #####:  180:	if(iter == NULL)
    #####:  181:		return -1;
    #####:  182:	if(iter->nameval_p == NULL)
    #####:  183:		return -1;
    #####:  184:	if(str == NULL)
    #####:  185:		return -1;
    #####:  186:	*str = iter->nameval_p->name;
    #####:  187:	return 0;
        -:  188:}
        -:  189:
        -:  190:// ---------------------------------------------------
        -:  191:
    #####:  192:Nameval* nv_iterator_begin(NamevalIterator* iter)
        -:  193:{
    #####:  194:	if(iter == NULL)
    #####:  195:		return NULL;
    #####:  196:	return iter->head;
        -:  197:}
        -:  198:
        -:  199:// ---------------------------------------------------
        -:  200:
    #####:  201:int nv_iterator_is_end(NamevalIterator* iter)
        -:  202:{
    #####:  203:	if(iter == NULL)
    #####:  204:		return -1;
    #####:  205:	if(iter->nameval_p == NULL)
    #####:  206:		return -1;
    #####:  207:	if(iter->nameval_p->next == NULL) // end
    #####:  208:		return 1;
        -:  209:	else
    #####:  210:		return 0;
        -:  211:}
        -:  212:
        -:  213:// ---------------------------------------------------
        -:  214:
    #####:  215:Nameval* nv_iterator_get_cur(NamevalIterator* iter)
        -:  216:{
    #####:  217:	if(iter == NULL)
    #####:  218:		return NULL;
    #####:  219:	return iter->nameval_p;
        -:  220:}
        -:  221:
        -:  222:// ---------------------------------------------------
        -:  223:
    #####:  224:int nv_iterator_set_next(NamevalIterator* iter)
        -:  225:{
    #####:  226:	if(iter == NULL)
    #####:  227:		return -1;
    #####:  228:	if(iter->nameval_p == NULL)
    #####:  229:		return -1;
    #####:  230:	iter->nameval_p = iter->nameval_p->next;
    #####:  231:	return 0;
        -:  232:}
        -:  233:
        -:  234:// ---------------------------------------------------
        -:  235:
    #####:  236:Nameval* nv_iterator_get_next(NamevalIterator* iter)
        -:  237:{
    #####:  238:	if(iter == NULL)
    #####:  239:		return NULL;
    #####:  240:	if(iter->nameval_p == NULL)
    #####:  241:		return NULL;
    #####:  242:	return iter->nameval_p->next;
        -:  243:}
        -:  244:
        -:  245:// ---------------------------------------------------
        -:  246:
    #####:  247:int nv_iterator_delete(NamevalIterator * iter)
        -:  248:{
    #####:  249:	mfree(iter);
    #####:  250:	iter = NULL;
    #####:  251:	return 0;
        -:  252:}
        -:  253:
        -:  254:// ---------------------------------------------------
        -:  255:
        -:  256:/*!
        -:  257:* \brief This function does not create a copy of str
        -:  258:* \ returns a pointer on str in HT
        -:  259:*/
        -:  260:
    #####:  261:int nv_iterator_get_data(NamevalIterator* iter, char** str)
        -:  262:{
    #####:  263:	if(iter == NULL)
    #####:  264:		return -1;
    #####:  265:	if(iter->nameval_p == NULL)
    #####:  266:		return -1;
    #####:  267:	if(str == NULL)
    #####:  268:		return -1;
    #####:  269:	*str = iter->nameval_p->name;
        -:  270:	// printf("str = %s\n", str);
    #####:  271:	return 0;
        -:  272:}
        -:  273:
        -:  274:
        -:  275:// ---------------------------------------------------
        -:  276:
    #####:  277:int print_elem (NamevalIterator* iter)
        -:  278:{
    #####:  279:	if(iter == NULL)
    #####:  280:		return -1;
    #####:  281:	if(iter->nameval_p == NULL)
    #####:  282:		return -1;
    #####:  283:	printf("print_elem: %ld\n", iter->index);
    #####:  284:	return 0;
        -:  285:}
        -:  286:
        -:  287:/*
        -:  288:// ---------------------------------------------------
        -:  289:
        -:  290:int for_each_hash_table(HashTableIterator* iter, int(*func)(void))
        -:  291:{
        -:  292:	for( iter->begin(); iter->this != iter->end(); iter = iter->next() )
        -:  293:	{
        -:  294:		for_each_nameval(iter->this, func);
        -:  295:	}
        -:  296:	return 0;
        -:  297:}
        -:  298:*/
        -:  299:
        -:  300:// ---------------------------------------------------
        -:  301:
    #####:  302:int for_each_nameval(NamevalIterator* iter, int (*func)(char*, int))
        -:  303:{
    #####:  304:	if(iter == NULL)
    #####:  305:		return -1;
        -:  306:	// printf("%s\n", nv_iterator_begin(iter)->name);
        -:  307:	// printf("isEnd = %d\n", nv_iterator_is_end(iter)); // 0 means that it is not the end
    #####:  308:	for( nv_iterator_begin(iter); nv_iterator_is_end(iter) == 0; nv_iterator_set_next(iter) )
        -:  309:	{
    #####:  310:		char* name = NULL;
    #####:  311:		nv_iterator_get_data(iter, &name);
    #####:  312:		func(name, iter->index);
        -:  313:	}
    #####:  314:	return 0;
        -:  315:}
        -:  316:
        -:  317:
        -:  318:// ---------------------------------------------------
        -:  319:
    #####:  320:int traversal(HashTableIterator* iter_ht)
        -:  321:{
    #####:  322:	if(iter_ht == NULL)
    #####:  323:		return -1;
        -:  324:	
        -:  325:	// NamevalIterator* iter_nv =	 nv_iterator_construct(iter_ht->hash_table_p);
        -:  326:	// for_each_hash_table(iter_ht, for_each_nameval(iter_nv, stupid_print))
        -:  327:
    #####:  328:	NamevalIterator* iter_nv = nv_iterator_construct(iter_ht->hash_table_p);
        -:  329:	// HashTableIterator* iter_ht = hash_iterator_construct(iter_ht->hash_table_p)
        -:  330:
    #####:  331:	for( hash_iterator_begin(iter_ht); hash_iterator_is_end(iter_ht) == 0; hash_iterator_set_next(iter_ht) )
        -:  332:	{
        -:  333:		// char* str = NULL;
        -:  334:		// hash_iterator_get_data(iter, &str);
        -:  335:		//iter->hash_table_p->symtab[iter->index] = 0;
    #####:  336:		nv_iterator_init_index(iter_ht->hash_table_p, iter_nv, iter_ht->index);
    #####:  337:		for_each_nameval(iter_nv, stupid_print);
        -:  338:	}
        -:  339:
        -:  340:
        -:  341:
    #####:  342:	mfree(iter_nv);
    #####:  343:	return 0;
        -:  344:}
        -:  345:
        -:  346:// ---------------------------------------------------
        -:  347:
    #####:  348:int nv_iterator_get_size(NamevalIterator* iter)
        -:  349:{
    #####:  350:	if(iter == NULL)
    #####:  351:		return -1;
    #####:  352:	if(iter->nameval_p == NULL)
    #####:  353:		return -1;
    #####:  354:	int i = 0;
    #####:  355:	Nameval* node = iter->head;
    #####:  356:	for(; node != NULL; node = node->next)
        -:  357:	{
    #####:  358:		if(node == NULL)
    #####:  359:			return -1;
    #####:  360:		node->index = i;
    #####:  361:		i++;
        -:  362:	}
    #####:  363:	return i;
        -:  364:}
        -:  365:
        -:  366:// ---------------------------------------------------
        -:  367:
    #####:  368:int erase_elem(HashTableIterator* iter, size_t h, char* name)
        -:  369:{
    #####:  370:	if(iter == NULL)
    #####:  371:		return -1;
    #####:  372:	Nameval* node = lookup(name, 0, iter->hash_table_p);
    #####:  373:	if(node == NULL)
    #####:  374:		return -1;
        -:  375:	//Nameval* temp = NULL;
    #####:  376:	if(node->prev == NULL)
        -:  377:	{
    #####:  378:		if(node->next == NULL)
    #####:  379:			node = NULL;
        -:  380:		else
        -:  381:		{
    #####:  382:			node->next->prev = NULL;
    #####:  383:			iter->hash_table_p->symtab[h] = node->next;
    #####:  384:			mfree(node);
        -:  385:		}
        -:  386:	}
        -:  387:	else // node->prev != NULL
        -:  388:	{
    #####:  389:		if(node->next == NULL)
    #####:  390:			node = NULL;
        -:  391:		else
        -:  392:		{
    #####:  393:			node->prev->next = node->next;
    #####:  394:			node->next->prev = node->prev;
    #####:  395:			mfree(node);
        -:  396:		}
        -:  397:	}
        -:  398:
        -:  399:
    #####:  400:	return 0;
        -:  401:}
        -:  402:
        -:  403:// ---------------------------------------------------
        -:  404:
    #####:  405:int stupid_print(char* name, int index)
        -:  406:{
    #####:  407:	printf("name[%d] = %s\n", index, name);
    #####:  408:	return 0;
        -:  409:}
        -:  410:
    #####:  411:int show_index(int index)
        -:  412:{
    #####:  413:	printf("index = %d\n", index);
    #####:  414:	return 0;
        -:  415:}
        -:  416:
        -:  417:
        -:  418:
        -:  419:// ---------------------------------------------------
