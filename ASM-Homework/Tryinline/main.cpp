#include <iostream>int strcmp(const char* s1, const char* s2);int main() {    auto first  = (char*)calloc(1, sizeof(char));    auto second = (char*)calloc(1, sizeof(char));    for(int i(0); i< 5; ++i) {        std::cin >> first;        std::cin >> second;        char cmpflag(0);        long a(0), b(0);        std::cout << first << " " << second << std::endl;        //.att_syntax noprefix            проверить, что al == 0        // ab       rdi        // a        rsi      //mov al, byte ptr[rsi]        //        inc rsi      /*  __asm__ __volatile__ (        R"(            .intel_syntax noprefix                xor rbx, rbx                mov rbx, 1    loop:                lodsb		        cmp al, 0                je zeroflag                cmp al, byte ptr[rdi]                jne End                inc rdi                jmp loop    zeroflag:                mov bl, byte ptr[rdi]    End:                mov %0, rbx                .att_syntax prefix            )"        : "=r"(a)        : "D"(first), "S"(second)        : "%rcx", "%rax", "%rbx"        );*/        strcmp(first, second);        printf("a = %ld\n", a);    //    if (!strcmp(first, second))      //      printf("!\n");    }}int strcmp(const char* s1, const char* s2){    while(*s1 && (*s1==*s2))        s1++,s2++;    return *(const unsigned char*)s1-*(const unsigned char*)s2;}/* __asm__(        R"(            .intel_syntax noprefix    loop:                xor rax, rax                lodsb		        test al, al                jz zeroflag                xor al, [rdi]                jnz End                inc rdi                jmp loop    zeroflag:                mov %0, rax    End:                .att_syntax prefix            )"        : "=r"(a)        : "R"(first), "S"(second)        : "%rcx"        ); */